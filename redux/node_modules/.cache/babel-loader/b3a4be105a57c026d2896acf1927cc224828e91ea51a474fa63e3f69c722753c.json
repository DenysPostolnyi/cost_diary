{"ast":null,"code":"import { createStore } from 'redux';\nimport { configureStore, createSlice } from \"@reduxjs/toolkit\";\nimport counter from \"../components/Counter\";\nimport { actionsReducer as counterSlice } from \"@reduxjs/toolkit/src/query/tests/helpers\";\nimport { createReducer as authSlice } from \"@reduxjs/toolkit/src\";\n\n// const counterReducer = (state = initialState, action) => {\n//     if (action.type === 'increment') {\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter\n//         };\n//     }\n//     if (action.type === 'decrement') {\n//         return {\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         };\n//     }\n//     if (action.type === 'increase') {\n//         return {\n//             counter: state.counter + action.amount,\n//             showCounter: state.showCounter\n//         };\n//     }\n//     if (action.type === 'toggle') {\n//         return {\n//             showCounter: !state.showCounter,\n//             counter: state.counter\n//         }\n//     }\n//     return state;\n// };\n//\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    authentication: authSlice.reducer\n  }\n  // reducer: counterSlice.reducer\n});\n// const store = createStore(counterReducer);\n\nexport default store;\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;","map":{"version":3,"names":["createStore","configureStore","createSlice","counter","actionsReducer","counterSlice","createReducer","authSlice","store","reducer","authentication","counterActions","actions","authActions"],"sources":["D:/work/JS/cost_diary/redux/src/store/index.js"],"sourcesContent":["import {createStore} from 'redux';\r\nimport {configureStore, createSlice} from \"@reduxjs/toolkit\";\r\nimport counter from \"../components/Counter\";\r\nimport {actionsReducer as counterSlice} from \"@reduxjs/toolkit/src/query/tests/helpers\";\r\nimport {createReducer as authSlice} from \"@reduxjs/toolkit/src\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const counterReducer = (state = initialState, action) => {\r\n//     if (action.type === 'increment') {\r\n//         return {\r\n//             counter: state.counter + 1,\r\n//             showCounter: state.showCounter\r\n//         };\r\n//     }\r\n//     if (action.type === 'decrement') {\r\n//         return {\r\n//             counter: state.counter - 1,\r\n//             showCounter: state.showCounter\r\n//         };\r\n//     }\r\n//     if (action.type === 'increase') {\r\n//         return {\r\n//             counter: state.counter + action.amount,\r\n//             showCounter: state.showCounter\r\n//         };\r\n//     }\r\n//     if (action.type === 'toggle') {\r\n//         return {\r\n//             showCounter: !state.showCounter,\r\n//             counter: state.counter\r\n//         }\r\n//     }\r\n//     return state;\r\n// };\r\n//\r\nconst store = configureStore({\r\n    reducer: {\r\n        counter: counterSlice.reducer,\r\n        authentication: authSlice.reducer\r\n    }\r\n    // reducer: counterSlice.reducer\r\n});\r\n// const store = createStore(counterReducer);\r\n\r\nexport default store;\r\nexport const counterActions = counterSlice.actions;\r\nexport const authActions = authSlice.actions;"],"mappings":"AAAA,SAAQA,WAAW,QAAO,OAAO;AACjC,SAAQC,cAAc,EAAEC,WAAW,QAAO,kBAAkB;AAC5D,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,SAAQC,cAAc,IAAIC,YAAY,QAAO,0CAA0C;AACvF,SAAQC,aAAa,IAAIC,SAAS,QAAO,sBAAsB;;AAO/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,GAAGP,cAAc,CAAC;EACzBQ,OAAO,EAAE;IACLN,OAAO,EAAEE,YAAY,CAACI,OAAO;IAC7BC,cAAc,EAAEH,SAAS,CAACE;EAC9B;EACA;AACJ,CAAC,CAAC;AACF;;AAEA,eAAeD,KAAK;AACpB,OAAO,MAAMG,cAAc,GAAGN,YAAY,CAACO,OAAO;AAClD,OAAO,MAAMC,WAAW,GAAGN,SAAS,CAACK,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}